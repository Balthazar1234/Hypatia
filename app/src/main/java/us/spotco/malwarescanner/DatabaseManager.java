/*
Hypatia: An realtime malware scanner for Android
Copyright (c) 2017-2018 Divested Computing, Inc.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/
package us.spotco.malwarescanner;

import android.content.Context;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.util.HashSet;
import java.util.Scanner;
import java.util.zip.GZIPInputStream;

public class DatabaseManager {

    public static File databasePath = null;
    public final static HashSet<Signatures.SignatureDatabase> signatureDatabases = new HashSet<>();

    private Context context;

    public DatabaseManager(Context context) {
        this.context = context;
        databasePath = new File(context.getFilesDir() + "/signatures/");
        databasePath.mkdir();
    }

    public static boolean areDatabasesAvailable() {
        return databasePath != null && databasePath.listFiles().length > 0;
    }

    public static boolean isDatabaseAvailable(String name) {
        return new File(databasePath + "/"  + name).exists();
    }

    public static void deteleDatabase(String name) {
        new File(databasePath + "/"  + name).delete();
    }

    public void loadRemoteDatabases() {
        try {
            signatureDatabases.clear();
            String api = Utils.prefs.getString("database_repo", "https://spotco.us/MalwareScannerSignatures/api.php");
            HttpURLConnection connection = Utils.getConnection(api);
            connection.connect();
            int res = connection.getResponseCode();
            if (res == 200 || res == 301 || res == 302) {
                Scanner request = new Scanner(connection.getErrorStream(), connection.getContentEncoding());
                String line;
                while (request.hasNextLine()) {
                    line = request.nextLine();
                    String[] items = line.split("~~");
                    Signatures.SignatureDatabase newDatabase = new Signatures.SignatureDatabase(items[0], items[1], false);
                    newDatabase.setAvailable(isDatabaseAvailable(items[0]));
                    signatureDatabases.add(newDatabase);
                }
            }
            connection.disconnect();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void updateDatabases() {
        loadRemoteDatabases();
        for (Signatures.SignatureDatabase db : signatureDatabases) {
            if (db.isAvailable()) {
                new DownloaderTask().execute(db.getUrl(), databasePath + "/" + db.getName());
            }
        }
    }

    public void loadAllAvailableDatabases(boolean forceReload) {
        if (!Signatures.available() || forceReload) {
            Signatures.clear();
            for (Signatures.SignatureDatabase db : signatureDatabases) {
                if (db.isAvailable()) {
                    File dbLocation = new File(databasePath + "/" + db.getName());
                    loadDatabase(dbLocation);
                }
            }
        }
    }

    private void loadDatabase(File database) {
        try {
            if (database.exists()) {
                BufferedReader reader;
                if (database.getName().endsWith(".gz")) {
                    reader = new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream(database))));
                } else {
                    reader = new BufferedReader(new FileReader(database));
                }
                String line;
                boolean trim = Utils.prefs.getBoolean("database_trim_variants", false);
                int maxLength = Utils.prefs.getInt("database_hash_length", 12);

                if (database.getName().contains(".hdb")) {//.hdb format: md5, size, name
                    while ((line = reader.readLine()) != null) {
                        String[] lineS = line.split(":");
                        if (trim) {
                            lineS[2] = lineS[2].split("-")[0];
                        }
                        Signatures.MD5.put(lineS[0].substring(0, maxLength), lineS[2]);
                    }
                } else if (database.getName().contains(".hsb")) {//.hsb format: sha256, size, name
                    while ((line = reader.readLine()) != null) {
                        String[] lineS = line.split(":");
                        if (trim) {
                            lineS[2] = lineS[2].split("-")[0];
                        }
                        if (lineS[0].length() == 32) {
                            Signatures.SHA1.put(lineS[0].substring(0, maxLength), lineS[2]);
                        } else {
                            Signatures.SHA256.put(lineS[0].substring(0, maxLength), lineS[2]);
                        }
                    }
                }
                reader.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
