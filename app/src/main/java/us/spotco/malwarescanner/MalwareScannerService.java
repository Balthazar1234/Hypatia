/*
Hypatia: A realtime malware scanner for Android
Copyright (c) 2017-2018 Divested Computing, Inc.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/
package us.spotco.malwarescanner;

import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.os.Build;
import android.os.Environment;
import android.os.FileObserver;
import android.os.IBinder;
import android.support.v4.app.NotificationCompat;

import java.io.File;
import java.util.HashSet;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;

public class MalwareScannerService extends Service {

    private final HashSet<RecursiveFileObserver> malwareMonitors = new HashSet<>();
    private ThreadPoolExecutor threadPoolExecutor = null;
    private NotificationCompat.Builder foregroundNotification = null;
    private NotificationManager notificationManager = null;
    private int maxScanSize = 0;

    @Override
    public final IBinder onBind(Intent intent) {
        return null;
    }

    @Override
    public final int onStartCommand(Intent intent, int flags, int startId) {
        maxScanSize = Utils.prefs.getInt("scanner_max_file_size", (1000 * 1000) * 80) * (1000 * 1000);

        malwareMonitors.clear();

        if(Utils.prefs.getBoolean("scanner_realtime_path_external", false)) {
            addMalwareMonitor("/storage");
        } else if(Utils.prefs.getBoolean("scanner_realtime_path_internal", true)) {
            addMalwareMonitor(Environment.getExternalStorageDirectory().toString());
        }

        threadPoolExecutor = (ThreadPoolExecutor) Executors.newScheduledThreadPool(Utils.getMaxThreads() + malwareMonitors.size());
        threadPoolExecutor.execute(new Runnable() {
            @Override
            public void run() {
                DatabaseManager.loadAllAvailableDatabases(false);
            }
        });

        for (final RecursiveFileObserver malwareMonitor : malwareMonitors) {
            threadPoolExecutor.execute(new Runnable() {
                @Override
                public void run() {
                    malwareMonitor.startWatching();
                }
            });
        }

        notificationManager = (NotificationManager) getApplicationContext().getSystemService(Context.NOTIFICATION_SERVICE);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            NotificationChannel foregroundChannel = new NotificationChannel("FOREGROUND", getString(R.string.notif_scanner_realtime), NotificationManager.IMPORTANCE_LOW);
            foregroundChannel.setDescription(getString(R.string.notif_scanner_realtime_summary));
            foregroundChannel.setShowBadge(false);
            notificationManager.createNotificationChannel(foregroundChannel);
        }
        setForeground();
        return START_STICKY;
    }

    private void addMalwareMonitor(String monitorPath) {
        malwareMonitors.add(new RecursiveFileObserver(monitorPath) {
            @Override
            public void onEvent(int event, String path) {
                switch (event) {
                    case FileObserver.MOVED_TO:
                    case FileObserver.CLOSE_WRITE:
                        File file = new File(path);
                        if (file.exists() && /*file.length() > 0 &&*/ file.length() <= maxScanSize) {
                            HashSet<File> filesToScan = new HashSet<>();
                            filesToScan.add(file);
                            new MalwareScanner(false).executeOnExecutor(threadPoolExecutor, filesToScan);
                        }
                        updateForegroundNotification();
                        break;
                }
            }
        });
    }

    @Override
    public final void onDestroy() {
        for (RecursiveFileObserver malwareMonitor : malwareMonitors) {
            malwareMonitor.stopWatching();
        }
        malwareMonitors.clear();
        System.gc();
        //Toast.makeText(this, "Hypatia: Realtime Scanning Stopped", Toast.LENGTH_SHORT).show();
    }

    private void setForeground() {
        foregroundNotification =
                new NotificationCompat.Builder(this)
                        .setSmallIcon(R.drawable.ic_notification)
                        .setContentTitle(getText(R.string.notif_scanner_realtime))
                        .setContentText(getText(R.string.notif_scanner_realtime_summary))
                        .setPriority(Notification.PRIORITY_MIN)
                        .setShowWhen(false);

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            foregroundNotification.setChannelId("FOREGROUND");
        }

        startForeground(-1, foregroundNotification.build());
    }

    private void updateForegroundNotification() {
        foregroundNotification.setSubText(Utils.amtFilesScanned + " files scanned");
        notificationManager.notify(-1, foregroundNotification.build());
    }

}